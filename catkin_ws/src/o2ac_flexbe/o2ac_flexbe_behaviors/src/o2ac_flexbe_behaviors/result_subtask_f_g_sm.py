#!/usr/bin/env python
# -*- coding: utf-8 -*-
###########################################################
#               WARNING: Generated code!                  #
#              **************************                 #
# Manual changes may get lost if file is generated again. #
# Only code inside the [MANUAL] tags will be kept.        #
###########################################################

from flexbe_core import Behavior, Autonomy, OperatableStateMachine, ConcurrencyContainer, PriorityContainer, Logger
from o2ac_flexbe_states.fasten import FastenActionState
from o2ac_flexbe_states.pick import PickActionState
from o2ac_flexbe_states.place import PlaceActionState
# Additional imports can be added inside the following tags
# [MANUAL_IMPORT]

# [/MANUAL_IMPORT]


'''
Created on 1635316143560
@author: AUTOGENERATED
'''
class result_subtask_f_gSM(Behavior):
	'''
	Behavior extracted from PDDL trace: result_subtask_f_g
	'''


	def __init__(self):
		super(result_subtask_f_gSM, self).__init__()
		self.name = 'result_subtask_f_g'

		# parameters of this behavior

		# references to used behaviors

		# Additional initialization code can be added inside the following tags
		# [MANUAL_INIT]
		
		# [/MANUAL_INIT]

		# Behavior comments:



	def create(self):
		# x:30 y:365, x:480 y:540
		_state_machine = OperatableStateMachine(outcomes=['failed', 'finished'])

		# Additional creation code can be added inside the following tags
		# [MANUAL_CREATE]
		
		# [/MANUAL_CREATE]


		with _state_machine:
			# x:30 y:40
			OperatableStateMachine.add('1: pick-handover a_bot panel_bearing b_bot',
										PickActionState(robot_name="a_bot", object_name="panel_bearing", helper_robot_name="b_bot"),
										transitions={'success': '2: place a_bot panel_bearing base', 'error': 'failed'},
										autonomy={'success': Autonomy.Off, 'error': Autonomy.Off})

			# x:80 y:130
			OperatableStateMachine.add('2: place a_bot panel_bearing base',
										PlaceActionState(robot_name="a_bot", object_name="panel_bearing", target="base"),
										transitions={'success': '3: fasten-dual-arm b_bot panel_bearing  a_bot', 'error': 'failed'},
										autonomy={'success': Autonomy.Off, 'error': Autonomy.Off})

			# x:130 y:220
			OperatableStateMachine.add('3: fasten-dual-arm b_bot panel_bearing  a_bot',
										FastenActionState(robot_name="b_bot", object_name="panel_bearing", task_name="", helper_robot_name="a_bot"),
										transitions={'success': '4: pick-handover a_bot panel_motor b_bot', 'error': 'failed'},
										autonomy={'success': Autonomy.Off, 'error': Autonomy.Off})

			# x:180 y:310
			OperatableStateMachine.add('4: pick-handover a_bot panel_motor b_bot',
										PickActionState(robot_name="a_bot", object_name="panel_motor", helper_robot_name="b_bot"),
										transitions={'success': '5: place a_bot panel_motor base', 'error': 'failed'},
										autonomy={'success': Autonomy.Off, 'error': Autonomy.Off})

			# x:230 y:400
			OperatableStateMachine.add('5: place a_bot panel_motor base',
										PlaceActionState(robot_name="a_bot", object_name="panel_motor", target="base"),
										transitions={'success': '6: fasten-dual-arm b_bot panel_motor  a_bot', 'error': 'failed'},
										autonomy={'success': Autonomy.Off, 'error': Autonomy.Off})

			# x:280 y:490
			OperatableStateMachine.add('6: fasten-dual-arm b_bot panel_motor  a_bot',
										FastenActionState(robot_name="b_bot", object_name="panel_motor", task_name="", helper_robot_name="a_bot"),
										transitions={'success': 'finished', 'error': 'failed'},
										autonomy={'success': Autonomy.Off, 'error': Autonomy.Off})


		return _state_machine


	# Private functions can be added inside the following tags
	# [MANUAL_FUNC]
	
	# [/MANUAL_FUNC]
